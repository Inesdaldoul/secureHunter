import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { isPlatformBrowser } from '@angular/common';
import { SecurityAuditService } from '../services/security-audit.service';
import { UniversalConnector } from '../connectors/universal-connector.service';
import { environment } from '../../../environments/environment';

@Injectable({ providedIn: 'root' })
export class CspConfigService {
  private readonly NONCE_LENGTH = 32;
  private policies: Map<string, string[]> = new Map();
  private nonce: string | null = null;

  constructor(
    private http: HttpClient,
    private auditService: SecurityAuditService,
    private connector: UniversalConnector,
    @Inject(PLATFORM_ID) private platformId: Object
  ) {}

  async initialize(): Promise<void> {
    if (isPlatformBrowser(this.platformId)) {
      await this.loadCspConfig();
      this.injectCspHeaders();
    }
  }

  private async loadCspConfig(): Promise<void> {
    try {
      const response = await this.http.get<CspConfigResponse>(
        'assets/configs/csp-policies.json'
      ).toPromise();

      this.nonce = this.generateCryptoSecureNonce();
      this.policies = this.buildEffectivePolicy(response!);
      
      this.auditService.logPolicyUpdate({
        policyVersion: response!.version,
        nonce: this.nonce
      });

    } catch (error) {
      this.auditService.logSecurityIncident({
        type: 'CSP_INIT_FAILURE',
        severity: 'CRITICAL',
        details: { error: (error as Error).message }
      });
      throw new Error('Failed to initialize CSP configuration');
    }
  }

  private buildEffectivePolicy(config: CspConfigResponse): Map<string, string[]> {
    const basePolicy = environment.production ? 
      config.production : 
      config.development;

    const effectivePolicy = new Map(Object.entries(basePolicy));
    
    // Add dynamic connections
    effectivePolicy.set('connect-src', [
      ...(effectivePolicy.get('connect-src') || []),
      ...this.connector.getAuthorizedEndpoints()
    ]);

    // Add nonce to script-src
    if (this.nonce) {
      effectivePolicy.set('script-src', [
        ...(effectivePolicy.get('script-src') || []),
        `'nonce-${this.nonce}'`
      ]);
    }

    return effectivePolicy;
  }

  private injectCspHeaders(): void {
    if (!isPlatformBrowser(this.platformId)) return;

    const policy = Array.from(this.policies.entries())
      .map(([directive, sources]) => `${directive} ${sources.join(' ')}`)
      .join('; ');

    const meta = document.createElement('meta');
    meta.httpEquiv = 'Content-Security-Policy';
    meta.content = policy;
    document.head.prepend(meta);
  }

  getNonce(): string {
    if (!this.nonce) {
      throw new Error('CSP nonce not initialized');
    }
    return this.nonce;
  }

  private generateCryptoSecureNonce(): string {
    const buffer = new Uint8Array(this.NONCE_LENGTH);
    crypto.getRandomValues(buffer);
    return Array.from(buffer)
      .map(byte => byte.toString(16).padStart(2, '0'))
      .join('');
  }
}

interface CspConfigResponse {
  version: string;
  production: Record<string, string[]>;
  development: Record<string, string[]>;
}