// vulnerability-map.component.ts
import { Component, OnInit, OnDestroy } from '@angular/core';
import { ViDataService } from '../../services/vi-data.service';
import { SecurityAuditService } from '../../../core/services/security-audit.service';
import { DataNormalizer } from '../../../core/utils/data-normalizer';
import { Threat, ThreatCriticality } from '../../../core/interfaces/threat.interface';
import { UniversalConnector } from '../../../core/connectors/universal-connector.service';
import { FeatureToggleService } from '../../../core/config/feature-toggles';

@Component({
  selector: 'app-vulnerability-map',
  templateUrl: './vulnerability-map.component.html',
  styleUrls: ['./vulnerability-map.component.scss']
})
export class VulnerabilityMapComponent implements OnInit, OnDestroy {
  private map!: L.Map;
  private threatLayers = new Map<ThreatCriticality, L.LayerGroup>();
  private subs = new Subscription();
  
  vulnerabilities: Threat[] = [];
  loading = true;
  currentZoom = 5;

  constructor(
    private viData: ViDataService,
    private auditService: SecurityAuditService,
    private normalizer: DataNormalizer,
    private connector: UniversalConnector,
    public featureToggle: FeatureToggleService
  ) {}

  ngOnInit() {
    this.initMap();
    this.loadData();
    this.setupRealTimeUpdates();
  }

  private initMap() {
    this.map = L.map('vulnerability-map', {
      zoomControl: false,
      attributionControl: false,
      preferCanvas: true
    }).setView([46.2276, 2.2137], this.currentZoom);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 18,
      detectRetina: true
    }).addTo(this.map);

    Object.values(ThreatCriticality).forEach(level => {
      const layer = L.layerGroup().addTo(this.map);
      this.threatLayers.set(level, layer);
    });
  }

  private async loadData() {
    try {
      const rawData = await this.viData.getVulnerabilities({
        timeframe: '24h',
        severity: 'medium+'
      });
      
      this.vulnerabilities = this.normalizer.normalizeData(rawData, 'vi');
      this.plotVulnerabilities();
      this.auditService.logUserAction('MAP_DATA_LOADED');

    } catch (error) {
      this.auditService.logSecurityIncident({
        type: 'MAP_LOAD_FAILURE',
        severity: 'HIGH',
        details: error
      });
    } finally {
      this.loading = false;
    }
  }

  private plotVulnerabilities() {
    this.threatLayers.forEach(layer => layer.clearLayers());

    this.vulnerabilities.forEach(vuln => {
      const marker = L.circleMarker([vuln.geoData.lat, vuln.geoData.lon], {
        radius: this.calculateRadius(vuln),
        color: this.getColor(vuln.criticality)
      });

      marker.bindPopup(this.sanitizePopupContent(vuln));
      this.threatLayers.get(vuln.criticality)?.addLayer(marker);
    });
  }

  private sanitizePopupContent(vuln: Threat): string {
    return `
      <h3>${this.normalizer.escapeHTML(vuln.name)}</h3>
      <p>Criticality: ${vuln.criticality.toUpperCase()}</p>
      <p>Last detected: ${vuln.timestamp | date:'short'}</p>
      ${this.featureToggle.isEnabled('SHOW_VULN_DETAILS') ? 
        `<p>${this.normalizer.sanitizeHTML(vuln.description)}</p>` : ''}
    `;
  }
}